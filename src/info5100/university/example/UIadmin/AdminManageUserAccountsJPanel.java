/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Persona.*;
import info5100.university.example.Department.Department;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author 陈凯璐
 */
public class AdminManageUserAccountsJPanel extends javax.swing.JPanel {
        
    private Department department;
    private JPanel mainpanel;

    /**
     * Creates new form AdminManageUserAccountsJPanel
     */
    public AdminManageUserAccountsJPanel(Department department, JPanel mainpanel) {
        
        initComponents();
        this.department = department;
        this.mainpanel = mainpanel;
        populateTable();
    }
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();
        model.setRowCount(0);

        if (department == null || department.getUseraccountdirectory() == null) {
            System.out.println("⚠ Department or useraccountdirectory is null");
            return;
        }

        for (UserAccount ua : department.getUseraccountdirectory().getUserAccountDirectory()) {
            if (ua != null) {
                int id = ua.getID();
                String username = ua.getUserLoginName();
                String role = ua.getRole();
                String status = "Active";
                model.addRow(new Object[]{id, username, role, status});
            }
        }

        model.fireTableDataChanged();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserAccounts = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage User Accounts");

        lblSearch.setText("Search");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblUserAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User ID", "Username", "Role", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUserAccounts);

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnModify.setText("Modify");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(btnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnModify)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(lblSearch)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(btnSearch))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnModify)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap(119, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        JTextField txtUsername = new JTextField();
        JComboBox<String> cmbRole = new JComboBox<>(new String[]{"Student", "Faculty", "Registrar", "Admin"});
        JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Active", "Inactive"});

        Object[] fields = {
            "Username:", txtUsername,
            "Role:", cmbRole,
            "Status:", cmbStatus
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Create New User", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String username = txtUsername.getText().trim();
            if (username.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username cannot be empty!");
                return;
            }

         
            DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();
            String userId = "U" + String.format("%03d", model.getRowCount() + 1);
            model.addRow(new Object[]{userId, username, cmbRole.getSelectedItem(), cmbStatus.getSelectedItem()});
            JOptionPane.showMessageDialog(this, "User created successfully!");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        int row = tblUserAccounts.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Please select a user to modify.");
            return;
        }

        int modelRow = tblUserAccounts.convertRowIndexToModel(row);
        DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();

        String username = (String) model.getValueAt(modelRow, 1);
        String role = (String) model.getValueAt(modelRow, 2);
        String status = (String) model.getValueAt(modelRow, 3);

        JTextField txtUsername = new JTextField(username);
        JComboBox<String> cmbRole = new JComboBox<>(new String[]{"Student", "Faculty", "Registrar", "Admin"});
        cmbRole.setSelectedItem(role);
        JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Active", "Inactive"});
        cmbStatus.setSelectedItem(status);

        Object[] fields = {
            "Username:", txtUsername,
            "Role:", cmbRole,
            "Status:", cmbStatus
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Modify User Account", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            model.setValueAt(txtUsername.getText().trim(), modelRow, 1);
            model.setValueAt(cmbRole.getSelectedItem(), modelRow, 2);
            model.setValueAt(cmbStatus.getSelectedItem(), modelRow, 3);
            JOptionPane.showMessageDialog(this, "User updated successfully!");
        }
        
            
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblUserAccounts.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a user account to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. Get Username from the selected table row (Column 0)
        String usernameToDelete;
        try {
            usernameToDelete = (String) tblUserAccounts.getValueAt(tblUserAccounts.convertRowIndexToModel(selectedRow), 1);
             if (usernameToDelete == null || usernameToDelete.trim().isEmpty()) {
                 throw new Exception("Username is empty in the selected row.");
             }
        } catch (Exception e) {
              JOptionPane.showMessageDialog(this, "Error retrieving username from table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
              return;
        }

        // *** Use the CORRECT method to find by USERNAME ***
        UserAccount accountToDelete = department.getUseraccountdirectory().findUserAccountByUsername(usernameToDelete); 
        // *** FIND CALL CORRECTED ***

        // Null check after finding
        if (accountToDelete == null) { 
            JOptionPane.showMessageDialog(this, "Selected user account ('" + usernameToDelete + "') not found in the directory. Maybe already deleted?", "Error", JOptionPane.ERROR_MESSAGE);
            populateTable(); 
            return; 
        }
        
        // Get associated name for confirmation (should be safe now)
        String associatedName = accountToDelete.getPersonName(); 

        // Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to permanently delete the user account for '" + usernameToDelete + "' (" + associatedName + ")?", 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // If confirmed, perform deletion
        if (confirm == JOptionPane.YES_OPTION) {
            boolean accountRemoved = false;

            // Delete User Account using the removeUserAccount method
            // This relies on removeUserAccount(UserAccount) existing in UserAccountDirectory
            accountRemoved = department.getUseraccountdirectory().removeUserAccount(accountToDelete); 
            
            // Refresh the table
            populateTable();
            
            // Show final status message
            if (accountRemoved) { 
                 System.out.println("User account '" + usernameToDelete + "' removed successfully.");
                 JOptionPane.showMessageDialog(this, "User account '" + usernameToDelete + "' deleted successfully.", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
            } else {
                 System.err.println("Error: Could not remove user account '" + usernameToDelete + "'.");
                 JOptionPane.showMessageDialog(this, "An error occurred trying to delete user account '" + usernameToDelete + "'.", "Deletion Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) mainpanel.getLayout();
        layout.previous(mainpanel);
        mainpanel.remove(this);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearch.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) tblUserAccounts.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblUserAccounts.setRowSorter(sorter);

        if (keyword.isEmpty()) {
            sorter.setRowFilter(null);
            return;
        }

        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword));
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblUserAccounts;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
