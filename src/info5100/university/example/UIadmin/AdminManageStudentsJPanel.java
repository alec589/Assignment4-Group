/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
/**
 *
 * @author 陈凯璐
 */
public class AdminManageStudentsJPanel extends javax.swing.JPanel {
    private Department department;
    private JPanel mainpanel;

    /**
     * Creates new form AdminManageStudentsJPanel
     */
     public AdminManageStudentsJPanel(Department department, JPanel mainpanel) {
        
        initComponents();
        this.department = department;
        this.mainpanel = mainpanel;
        populateTable();
        setupTableSorter();
    }
     
     public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        model.setRowCount(0);

        if (department == null || department.getStudentdirectory() == null) {
            System.out.println("⚠ Department or StudentDirectory is null");
            return;
        }

        for (StudentProfile sp : department.getStudentdirectory().getStudentlist()) {
            if (sp != null && sp.getPerson() != null) {
                int id = sp.getStudentID();
                String name = sp.getPerson().getName();

                String deptName = department.getName() != null ? department.getName() : "N/A";

                String status = sp.getTuitionBalance() > 0 ? "Active" : "Inactive";

                model.addRow(new Object[]{id, name, deptName, status});
            }
        }

        model.fireTableDataChanged();
    }
     
     
     
     private void setupTableSorter() {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblStudents.getModel());
        tblStudents.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage Students");

        lblSearchBy.setText("Search By：");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Department" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudents);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(btnEdit)
                        .addGap(51, 51, 51)
                        .addComponent(btnDelete)
                        .addGap(47, 47, 47)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(lblSearchBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String type = (String) cmbSearchType.getSelectedItem();
        String keyword = txtSearch.getText().trim();

        TableRowSorter<? extends TableModel> sorter =
                (TableRowSorter<? extends TableModel>) tblStudents.getRowSorter();

        if (keyword.isEmpty()) {
            sorter.setRowFilter(null);
            return;
        }

        int colIndex;
switch (type) {
    case "ID":
        colIndex = 0;
        break;
    case "Name":
        colIndex = 1;
        break;
    case "Department":
        colIndex = 3;
        break;
    default:
        colIndex = 1;
        break;
}

        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword, colIndex));
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int row = tblStudents.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student to edit.");
            return;
        }

        int modelRow = tblStudents.convertRowIndexToModel(row);
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        String name = (String) model.getValueAt(modelRow, 1);
        String newName = JOptionPane.showInputDialog(this, "Edit Name:", name);
        if (newName != null && !newName.trim().isEmpty()) {
            model.setValueAt(newName, modelRow, 1);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. Get Student's Person ID from the selected table row
        
        String studentPersonId;
        try {
            // Use convertRowIndexToModel for safety with sorting/filtering
            studentPersonId = (String) tblStudents.getValueAt(tblStudents.convertRowIndexToModel(selectedRow), 0);
             if (studentPersonId == null || studentPersonId.trim().isEmpty()) {
                 throw new Exception("Student Person ID is empty in the selected row.");
             }
        } catch (Exception e) {
              JOptionPane.showMessageDialog(this, "Error retrieving Student ID from table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
              return;
        }

        // 2. Find the StudentProfile object using the Person ID
     
        StudentProfile studentToDelete = department.getStudentdirectory().findStudent(studentPersonId);  // Use findStudent, not findStudentProfile
        if (studentToDelete == null) {
            JOptionPane.showMessageDialog(this, "Selected student not found in the directory. Maybe already deleted?", "Error", JOptionPane.ERROR_MESSAGE);
            populateTable(); // Refresh table
            return;
        }
        
        // 3. Get the associated Person object
        Person personToDelete = studentToDelete.getPerson();
        if (personToDelete == null) {
             JOptionPane.showMessageDialog(this, "Error: Student profile is not linked to a person.", "Error", JOptionPane.ERROR_MESSAGE);
             return; 
        }

        // 4. Find the associated UserAccount object
        UserAccount accountToDelete = null;
        UserAccountDirectory uaDirectory = department.getUseraccountdirectory();
        if (uaDirectory != null && uaDirectory.getUserAccountDirectory() != null) {
            for (UserAccount ua : uaDirectory.getUserAccountDirectory()) {
                // Use the correct method name getAssociatedPersonProfile()
                if (ua.getAssociatedPersonProfile() == studentToDelete) { 
                    accountToDelete = ua;
                    break; 
                }
            }
        }
     

        // 5. Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to permanently delete student '" + personToDelete.getName() + "'?\nThis will also delete their associated user account (if one exists).", 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // 6. If confirmed, perform the deletions from all relevant directories
        if (confirm == JOptionPane.YES_OPTION) {
            boolean accountRemoved = false;
            boolean studentRemoved = false;
            boolean personRemoved = false;

            // Delete User Account (if found)
            if (accountToDelete != null) {
                // Relies on removeUserAccount(UserAccount) existing in UserAccountDirectory
                accountRemoved = department.getUseraccountdirectory().removeUserAccount(accountToDelete); 
                if (!accountRemoved) {
                     System.err.println("Warning: Could not remove user account for student " + personToDelete.getName());
                } else {
                     System.out.println("User account for student " + personToDelete.getName() + " removed.");
                }
            } else {
                 System.out.println("Info: No user account found associated with student " + personToDelete.getName() + " to delete.");
                 accountRemoved = true; // No account existed, consider it 'removed'
            }

            // Delete Student Profile
            // Directly remove from the list (Ideally, StudentDirectory should have a remove method)
            studentRemoved = department.getStudentdirectory().getStudentlist().remove(studentToDelete); // Assumes getStudentlist() returns the ArrayList
             if (!studentRemoved) {
                  System.err.println("Error: Could not remove student profile for " + personToDelete.getName());
             } else {
                 System.out.println("Student profile for " + personToDelete.getName() + " removed.");
             }

            // Delete Person object
            // Relies on the public removePerson method in PersonDirectory
            personRemoved = department.getPersondirectory().removePerson(personToDelete); 
             if (!personRemoved) {
                  // Log potential issue if Person couldn't be removed (might be shared?)
                  System.err.println("Error: Could not remove person object for " + personToDelete.getName() + ". Is it linked elsewhere?");
             } else {
                  System.out.println("Person object for " + personToDelete.getName() + " removed.");
             }


            // 7. Refresh the table to reflect the deletion
            populateTable();
            
            // 8. Show final status message
            
            if (studentRemoved && personRemoved) { 
                 JOptionPane.showMessageDialog(this, "Student '" + personToDelete.getName() + "' and associated data deleted successfully.", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
            } else {
                 if (!personRemoved && studentRemoved) {
                     JOptionPane.showMessageDialog(this, "Student profile and user account removed, but the base Person record could not be deleted (possibly linked elsewhere).", "Partial Deletion", JOptionPane.WARNING_MESSAGE);
                 } else {
                     JOptionPane.showMessageDialog(this, "An error occurred during deletion. Some data might not have been removed. Please check logs.", "Deletion Error", JOptionPane.ERROR_MESSAGE);
                 }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) mainpanel.getLayout();
        layout.previous(mainpanel);
        mainpanel.remove(this);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
