/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
/**
 *
 * @author 陈凯璐
 */
public class AdminManageStudentsJPanel extends javax.swing.JPanel {
    private Department department;
    private JPanel mainpanel;

    /**
     * Creates new form AdminManageStudentsJPanel
     */
     public AdminManageStudentsJPanel(Department department, JPanel mainpanel) {
        
        initComponents();
        this.department = department;
        this.mainpanel = mainpanel;
        populateTable();
        setupTableSorter();
    }
     
     public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
    model.setRowCount(0);
    // ... null checks ...
    for (StudentProfile sp : department.getStudentdirectory().getStudentlist()) {
        if (sp != null && sp.getPerson() != null) {

             String id = sp.getPerson().getPersonId(); 
            String name = sp.getPerson().getName();
            String deptName = department.getName() != null ? department.getName() : "N/A";
            String status = sp.getTuitionBalance() > 0 ? "Active" : "Inactive"; // Might be reversed logic? Usually balance > 0 means needs payment?
            model.addRow(new Object[]{id, name, deptName, status}); // Adding int, String, String, String
        }
    }
    model.fireTableDataChanged();
}
     
     
     
     private void setupTableSorter() {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblStudents.getModel());
        tblStudents.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage Students");

        lblSearchBy.setText("Search By：");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Department" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudents);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(btnEdit)
                        .addGap(51, 51, 51)
                        .addComponent(btnDelete)
                        .addGap(47, 47, 47)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(lblSearchBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String type = (String) cmbSearchType.getSelectedItem();
        String keyword = txtSearch.getText().trim();

        TableRowSorter<? extends TableModel> sorter =
                (TableRowSorter<? extends TableModel>) tblStudents.getRowSorter();

        if (keyword.isEmpty()) {
            sorter.setRowFilter(null);
            return;
        }

        int colIndex;
switch (type) {
    case "ID":
        colIndex = 0;
        break;
    case "Name":
        colIndex = 1;
        break;
    case "Department":
        colIndex = 3;
        break;
    default:
        colIndex = 1;
        break;
}

        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword, colIndex));
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int row = tblStudents.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student to edit.");
            return;
        }

        int modelRow = tblStudents.convertRowIndexToModel(row);
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        String name = (String) model.getValueAt(modelRow, 1);
        String newName = JOptionPane.showInputDialog(this, "Edit Name:", name);
        if (newName != null && !newName.trim().isEmpty()) {
            model.setValueAt(newName, modelRow, 1);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        int modelRow = -1; 
        int currentViewRowCount = tblStudents.getRowCount(); // Get view row count *before* conversion
        int currentModelRowCount = model.getRowCount(); // Get model row count *before* conversion

        // Safely convert view row index to model row index
        try {
            // Check if view row is still valid within the current view row count
            if (selectedRow >= currentViewRowCount) {
                 System.err.println("Delete Error: View selectedRow (" + selectedRow + ") is >= initial view row count (" + currentViewRowCount + ")");
                 JOptionPane.showMessageDialog(this, "Selected row index is out of bounds for the current view. Please re-select.", "Error", JOptionPane.ERROR_MESSAGE);
                 populateTable(); 
                 return;
            }
            modelRow = tblStudents.convertRowIndexToModel(selectedRow);
            
            // Re-check model row validity immediately after conversion
             if (modelRow < 0) {
                 System.err.println("Delete Error: Converted modelRow (" + modelRow + ") is invalid.");
                 JOptionPane.showMessageDialog(this, "Cannot determine the data row for the selected view row. Please re-select.", "Error", JOptionPane.ERROR_MESSAGE);
                 populateTable(); 
                 return;
             }
             // Check against the model row count we captured earlier
             if (modelRow >= currentModelRowCount) {
                 System.err.println("Delete Error: Converted modelRow (" + modelRow + ") is >= initial model row count (" + currentModelRowCount + ")");
                 JOptionPane.showMessageDialog(this, "Selected row index is out of bounds for the data model. Please re-select.", "Error", JOptionPane.ERROR_MESSAGE);
                 populateTable(); 
                 return;
             }

        } catch (IndexOutOfBoundsException e) {
             JOptionPane.showMessageDialog(this, "Error converting table row index. Table might be inconsistent.", "Error", JOptionPane.ERROR_MESSAGE);
             System.err.println("Error converting row index: " + e.getMessage());
             populateTable(); 
             return;
        }
        
        // --- Get Value Block ---
        String studentPersonId;
        String personIdStr = null; 
        try {
            // *** CRITICAL: Re-check model row count AGAIN right before accessing ***
            int rowCountNow = model.getRowCount();
            if (rowCountNow == 0) {
                 System.err.println("Delete Error: Model row count became 0 right before getValueAt! Was trying to access index " + modelRow);
                 throw new Exception("Data model became empty unexpectedly.");
            }
             if (modelRow >= rowCountNow) {
                 System.err.println("Delete Error: modelRow (" + modelRow + ") became >= rowCountNow (" + rowCountNow + ") right before getValueAt!");
                 throw new Exception("Model row index became invalid unexpectedly.");
             }
             
            System.out.println("Attempting getValueAt(" + modelRow + ", 0) on model with " + rowCountNow + " rows."); // Debugging line
            Object value = model.getValueAt(modelRow, 0); // Line 281 where error occurred
             
            if (value == null) {
                 throw new Exception("Student Person ID value in the selected row ("+modelRow+") is null.");
             }
            personIdStr = value.toString();
            
            if (personIdStr.trim().isEmpty()) {
                 throw new Exception("Student Person ID is empty in the selected row ("+modelRow+").");
            }
            studentPersonId = personIdStr; 
            
            System.out.println("Successfully retrieved Person ID: " + studentPersonId); // Debugging line
            
        } catch (ArrayIndexOutOfBoundsException e) { 
             // This specific catch block handles the error you are seeing
             JOptionPane.showMessageDialog(this, "Internal Error: Cannot access data at the specified index.\nModel might be empty or index is wrong.\nModel Row Count: " + model.getRowCount() + ", Index tried: " + modelRow, "Error", JOptionPane.ERROR_MESSAGE);
             System.err.println("!!! ArrayIndexOutOfBoundsException during getValueAt(row=" + modelRow + ", col=0). Model rows=" + model.getRowCount() + ". Error: " + e.getMessage());
             e.printStackTrace(); // Print stack trace for detailed debugging
             return; // Stop execution
        } catch (Exception e) {
              JOptionPane.showMessageDialog(this, "Error retrieving Student ID from table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
              System.err.println("Error during getValueAt(row=" + modelRow + ", col=0) or processing: " + e.toString());
              return;
        }
        
        
        
        StudentProfile studentToDelete = department.getStudentdirectory().findStudent(studentPersonId); 
        if (studentToDelete == null) { 
             JOptionPane.showMessageDialog(this, "Student (Person ID: "+studentPersonId+") not found in directory.", "Error", JOptionPane.ERROR_MESSAGE);
             populateTable(); 
             return; 
        }
        Person personToDelete = studentToDelete.getPerson();
        if (personToDelete == null) { 
             JOptionPane.showMessageDialog(this, "Error: Student profile is not linked to a person.", "Error", JOptionPane.ERROR_MESSAGE);
             return; 
        }
        UserAccount accountToDelete = null; 
        UserAccountDirectory uaDirectory = department.getUseraccountdirectory();
        if (uaDirectory != null && uaDirectory.getUserAccountDirectory() != null) {
            for (UserAccount ua : uaDirectory.getUserAccountDirectory()) {
                if (ua.getAssociatedPersonProfile() == studentToDelete) { 
                    accountToDelete = ua;
                    break; 
                }
            }
        }
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to permanently delete student '" + personToDelete.getName() + "'?\nThis will also delete their associated user account (if one exists).", 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        ); 
        if (confirm == JOptionPane.YES_OPTION) { 
            boolean accountRemoved = true; 
            boolean studentRemoved = false;
            boolean personRemoved = false;

            if (accountToDelete != null) { 
                accountRemoved = department.getUseraccountdirectory().removeUserAccount(accountToDelete); 
                if(!accountRemoved) System.err.println("Warning: Could not remove user account for student " + personToDelete.getName());
                else System.out.println("User account removed for student " + personToDelete.getName());
            } else {
                System.out.println("Info: No user account found for student " + personToDelete.getName());
            }

            try {
                studentRemoved = department.getStudentdirectory().getStudentlist().remove(studentToDelete); 
                if (!studentRemoved) System.err.println("Error: Could not remove student profile for " + personToDelete.getName());
                else System.out.println("Student profile removed for " + personToDelete.getName());
            } catch (Exception e) {
                 System.err.println("Exception removing student profile: " + e.getMessage());
            }
             
            try {
                personRemoved = department.getPersondirectory().removePerson(personToDelete); 
                if (!personRemoved) System.err.println("Warning: Could not remove person object for " + personToDelete.getName() + ". Linked elsewhere?");
                else System.out.println("Person object removed for " + personToDelete.getName());
            } catch (Exception e) {
                 System.err.println("Exception removing person object: " + e.getMessage());
            }

            populateTable(); 

            if (studentRemoved && personRemoved) { 
                JOptionPane.showMessageDialog(this, "Student '" + personToDelete.getName() + "' deleted successfully.", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
            } else { 
                JOptionPane.showMessageDialog(this, "Deletion partially failed. Check logs for details.", "Deletion Warning", JOptionPane.WARNING_MESSAGE);
            }
        } 
    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) mainpanel.getLayout();
        layout.previous(mainpanel);
        mainpanel.remove(this);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
