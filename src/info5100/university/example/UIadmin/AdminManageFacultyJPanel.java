/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
/**
 *
 * @author 陈凯璐
 */
public class AdminManageFacultyJPanel extends javax.swing.JPanel {
    private Department department;

    /**
     * Creates new form AdminManageFacultyJPanel
     */
    public AdminManageFacultyJPanel(Department department) {
        this.department = department; 
        initComponents();
        populateTable(); 
        setupTableSorter();
    }
    
    public void populateTable() {
    DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
    model.setRowCount(0);

    if (department == null || department.getFacultydirectory() == null) {
        System.out.println("⚠ Department or FacultyDirectory is null");
        return;
    }

    for (FacultyProfile fp : department.getFacultydirectory().getTeacherlist()) {
        if (fp != null && fp.getPerson() != null) {
            String id = String.valueOf(fp.getID());
            String name = fp.getPerson().getName();
            String email = fp.getEmail() != null ? fp.getEmail() : "N/A";
            String position = fp.getPosition() != null ? fp.getPosition() : "N/A";
            String status = "Active";
            model.addRow(new Object[]{id, name, email, position, status});
        }
    }

    model.fireTableDataChanged();
}

    private void setupTableSorter() {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tblFaculty.getModel());
        tblFaculty.setRowSorter(sorter);

        btnSearch.addActionListener(e -> {
            String type = ((String) cmbSearchType.getSelectedItem()).trim();
            String keyword = txtSearch.getText().trim().toLowerCase();

            if (keyword.isEmpty()) {
                sorter.setRowFilter(null);
                return;
            }

            int colIndex;
            switch (type) {
                case "Faculty ID": colIndex = 0; break;
                case "Name": colIndex = 1; break;
                case "Email": colIndex = 2; break;
                case "Department": colIndex = 3; break;
                case "Status": colIndex = 4; break;
                default: colIndex = 1; break;
            }

            final int colIndexFinal = colIndex;
            sorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
                @Override
                public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {
                    Object val = entry.getValue(colIndexFinal);
                    return val != null && val.toString().toLowerCase().contains(keyword);
                }
            });
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage Faculty");

        lblSearchBy.setText("Search By");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Faculty ID ", "Name ", "Email ", "Department ", "Status" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Email", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFaculty);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(lblSearchBy)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnEdit)
                        .addGap(41, 41, 41)
                        .addComponent(btnDelete)
                        .addGap(41, 41, 41)
                        .addComponent(btnBack)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblFaculty.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a faculty member to edit.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int facultyId = (int) tblFaculty.getValueAt(selectedRow, 0);
    FacultyProfile faculty = department.getFacultydirectory().findFacultyById(facultyId);

    if (faculty == null) {
        JOptionPane.showMessageDialog(this, "Faculty not found!");
        return;
    }

    String newEmail = JOptionPane.showInputDialog(this, "Enter new email:", faculty.getEmail());
    if (newEmail == null) return;

    String newPosition = JOptionPane.showInputDialog(this, "Enter new position/title:", faculty.getPosition());
    if (newPosition == null) return;

    String newOffice = JOptionPane.showInputDialog(this, "Enter new office location:", faculty.getOfficeLocation());
    if (newOffice == null) return;

    faculty.setEmail(newEmail);
    faculty.setPosition(newPosition);
    faculty.setOfficeLocation(newOffice);

    JOptionPane.showMessageDialog(this, "Faculty information updated successfully!");
    populateTable(); 
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblFaculty.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Please select a faculty to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this faculty?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
            int modelRow = tblFaculty.convertRowIndexToModel(row);
            model.removeRow(modelRow);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        Container parent = this.getParent();
        if (parent.getLayout() instanceof CardLayout) {
            CardLayout layout = (CardLayout) parent.getLayout();
            layout.previous(parent);
        }
    
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblFaculty.setRowSorter(sorter);

    String type = ((String) cmbSearchType.getSelectedItem()).trim();
    String keyword = txtSearch.getText().trim().toLowerCase();

    if (keyword.isEmpty()) {
        sorter.setRowFilter(null);
        JOptionPane.showMessageDialog(this, "Please enter a keyword to search!");
        return;
    }

    int colIndex = -1;
    for (int i = 0; i < tblFaculty.getColumnCount(); i++) {
        String columnName = tblFaculty.getColumnName(i).trim().toLowerCase();
        if (columnName.contains(type.toLowerCase().replace(" ", ""))) {
            colIndex = i;
            break;
        }
    }

    if (colIndex == -1) {
        colIndex = 1;
    }

    final int colIndexFinal = colIndex;
    sorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
        @Override
        public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {
            Object val = entry.getValue(colIndexFinal);
            return val != null && val.toString().toLowerCase().contains(keyword);
        }
    });
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblFaculty;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
