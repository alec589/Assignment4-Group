/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Calendar;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.RegisterProfile;
import info5100.university.example.Persona.UserAccount;
import info5100.university.example.Persona.UserAccountDirectory;
import javax.swing.DefaultComboBoxModel;
/**
 *
 * @author 陈凯璐
 */
public class AdminManageFacultyJPanel extends javax.swing.JPanel {
    Department department;
    private JPanel mainpanel;

    /**
     * Creates new form AdminManageFacultyJPanel
     */
    public AdminManageFacultyJPanel(Department department, JPanel mainpanel) {
         
        initComponents();
        this.department = department;
        this.mainpanel = mainpanel;
        populateTable(); 
        //setupTableSorter(); 
    }
    
    /*public void populateTable() {
    DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
    model.setRowCount(0);

    if (department == null || department.getFacultydirectory() == null) {
        System.out.println("⚠ Department or FacultyDirectory is null");
        return;
    }

    for (FacultyProfile fp : department.getFacultydirectory().getTeacherlist()) {
        if (fp != null && fp.getPerson() != null) {
            String id = String.valueOf(fp.getID()); // 存为 String
            String name = fp.getPerson().getName();
            String email = fp.getEmail() != null ? fp.getEmail() : "N/A";
            String depart = department.getName() != null ? department.getName() : "N/A";
            String status = "Active";
            model.addRow(new Object[]{id, name, email, depart, status});
        }
    }

    model.fireTableDataChanged();
}

    private void setupTableSorter() {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tblFaculty.getModel());
        tblFaculty.setRowSorter(sorter);

    }*/
    
    public void populateTable() {

    DefaultTableModel model = (DefaultTableModel)tblFaculty.getModel();
       model.setRowCount(0);
      
       for(  FacultyProfile r: department.getFacultydirectory().getTeacherlist()){ 
           
           Object[] row = new Object[5];
           row[0] = r; 
           row[1] = r.getPerson().getName();
           row[2] = r.getEmail();
           row[3] = department.getName();
           row[4] = r.getStatus();
          model.addRow(row);
        }
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnAssignCourse = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage Faculty");

        lblSearchBy.setText("Search By");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Faculty ID ", "Name ", "Email ", "Department ", "Status" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Email", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFaculty);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAssignCourse.setText("Assign Course");
        btnAssignCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(lblSearchBy)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addComponent(btnEdit)
                            .addGap(32, 32, 32)
                            .addComponent(btnAssignCourse)
                            .addGap(31, 31, 31)
                            .addComponent(btnDelete)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBack))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnBack)
                    .addComponent(btnAssignCourse))
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a faculty member to edit.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    FacultyProfile fp = (FacultyProfile) tblFaculty.getValueAt(selectedRow, 0);
    int facultyId = fp.getID();

    FacultyProfile faculty = department.getFacultydirectory().findFacultyById(facultyId);

    if (faculty == null) {
        JOptionPane.showMessageDialog(this, "Faculty not found!");
        return;
    }

    String newEmail = JOptionPane.showInputDialog(this, "Enter new email:", faculty.getEmail());
    if (newEmail == null) return;

    String newPosition = JOptionPane.showInputDialog(this, "Enter new position/title:", faculty.getPosition());
    if (newPosition == null) return;

    String newOffice = JOptionPane.showInputDialog(this, "Enter new office location:", faculty.getOfficeLocation());
    if (newOffice == null) return;

    faculty.setEmail(newEmail);
    faculty.setPosition(newPosition);
    faculty.setOfficeLocation(newOffice);

    JOptionPane.showMessageDialog(this, "Faculty information updated successfully!");
    populateTable();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
       
       
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow >=0){
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected accounts?", "Warning",dialogButton);
        if(dialogResult ==JOptionPane.YES_OPTION){
            
        FacultyProfile fp = (FacultyProfile)tblFaculty.getValueAt(selectedRow, 0);
        department.getFacultydirectory().delete(fp);
        populateTable();
            
        }
        }else{
            JOptionPane.showMessageDialog(null, "please select the Faculty from the list", "warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) mainpanel.getLayout();
        layout.previous(mainpanel);
        mainpanel.remove(this);
    
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tblFaculty.setRowSorter(sorter);

        String type = ((String) cmbSearchType.getSelectedItem()).trim();
        String keyword = txtSearch.getText().trim().toLowerCase();

        if (keyword.isEmpty()) {
            sorter.setRowFilter(null);
            JOptionPane.showMessageDialog(this, "Please enter a keyword to search!");
            return;
        }

        java.util.function.Function<String,String> norm = s -> s == null ? "" : s.toLowerCase().replace(" ","");

        int modelCol = -1;
        for (int i = 0; i < model.getColumnCount(); i++) {
            if (norm.apply(model.getColumnName(i)).equals(norm.apply(type))) {
                modelCol = i;
                break;
            }
        }
        if (modelCol == -1) {
            JOptionPane.showMessageDialog(this, "Unknown column: " + type);
            return;
        }

        final int colIndexFinal = modelCol;
        sorter.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
            @Override
            public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                Object val = entry.getValue(colIndexFinal);
                return val != null && val.toString().toLowerCase().contains(keyword);
            }
        });
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAssignCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCourseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        FacultyProfile fp = (FacultyProfile) tblFaculty.getValueAt(selectedRow, 0);
        int facultyId = fp.getID();
        

        FacultyProfile selectedFaculty = department.getFacultydirectory().findFacultyById(facultyId);
        if (selectedFaculty == null) {
            JOptionPane.showMessageDialog(this, "Selected faculty not found in directory.");
            return;
        }

        
        JComboBox<String> semesterComboBox = new JComboBox<>();
        JComboBox<CourseOffer> courseComboBox = new JComboBox<>();

       
        Calendar calendar = department.getCalendar();
        DefaultComboBoxModel<String> semesterModel = new DefaultComboBoxModel<>();
        if(calendar.getAllSemesterNames() == null || calendar.getAllSemesterNames().isEmpty()){
            JOptionPane.showMessageDialog(this, "No semesters found in the calendar.");
            return;
        }
        for (String semesterName : calendar.getAllSemesterNames()) {
            semesterModel.addElement(semesterName);
        }
        semesterComboBox.setModel(semesterModel);

        
        semesterComboBox.addActionListener(e -> {
            String selectedSemester = (String) semesterComboBox.getSelectedItem();
            if (selectedSemester != null) {
                CourseSchedule schedule = calendar.getCourseSchedule(selectedSemester);
                DefaultComboBoxModel<CourseOffer> courseModel = new DefaultComboBoxModel<>();
                if (schedule != null) {
                    for (CourseOffer co : schedule.getSchedule()) {
                        
                        courseModel.addElement(co); 
                    }
                }
                courseComboBox.setModel(courseModel);
            }
        });

        
         if (semesterComboBox.getItemCount() > 0) {
             semesterComboBox.setSelectedIndex(0); 
         }

        
        Object[] message = {
            "Select Semester:", semesterComboBox,
            "Select Course Offering (by Course Number):", courseComboBox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Assign Course to " + selectedFaculty.getPerson().getName(), JOptionPane.OK_CANCEL_OPTION);

        
        if (option == JOptionPane.OK_OPTION) {
            CourseOffer selectedCourseOffer = (CourseOffer) courseComboBox.getSelectedItem();
            if (selectedCourseOffer != null) {
                
                selectedCourseOffer.AssignAsTeacher(selectedFaculty);
                JOptionPane.showMessageDialog(this, "Faculty " + selectedFaculty.getPerson().getName() + " assigned to course " + selectedCourseOffer.getCourseName() + " successfully.");
               
            } else {
                JOptionPane.showMessageDialog(this, "No course selected or no courses available for the selected semester.");
            }
        }
    }//GEN-LAST:event_btnAssignCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignCourse;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblFaculty;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
