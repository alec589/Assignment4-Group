/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIadmin;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Calendar;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.UserAccount;
import info5100.university.example.Persona.UserAccountDirectory;
import javax.swing.DefaultComboBoxModel;
/**
 *
 * @author 陈凯璐
 */
public class AdminManageFacultyJPanel extends javax.swing.JPanel {
    private Department department;

    /**
     * Creates new form AdminManageFacultyJPanel
     */
    public AdminManageFacultyJPanel(Department department) {
        this.department = department; 
        initComponents();
        populateTable(); 
        setupTableSorter(); // setupTableSorter 现在只设置 Sorter，不添加多余的监听器
    }
    
    public void populateTable() {
    DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
    model.setRowCount(0);

    if (department == null || department.getFacultydirectory() == null) {
        System.out.println("⚠ Department or FacultyDirectory is null");
        return;
    }

    for (FacultyProfile fp : department.getFacultydirectory().getTeacherlist()) {
        if (fp != null && fp.getPerson() != null) {
            String id = String.valueOf(fp.getID()); // 存为 String
            String name = fp.getPerson().getName();
            String email = fp.getEmail() != null ? fp.getEmail() : "N/A";
            String position = fp.getPosition() != null ? fp.getPosition() : "N/A";
            String status = "Active";
            model.addRow(new Object[]{id, name, email, position, status});
        }
    }

    model.fireTableDataChanged();
}

    private void setupTableSorter() {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) tblFaculty.getModel());
        tblFaculty.setRowSorter(sorter);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnAssignCourse = new javax.swing.JButton();

        lblTitle.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N
        lblTitle.setText("Manage Faculty");

        lblSearchBy.setText("Search By");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Faculty ID ", "Name ", "Email ", "Department ", "Status" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Email", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFaculty);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">>Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAssignCourse.setText("Assign Course");
        btnAssignCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(lblSearchBy)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addComponent(btnEdit)
                            .addGap(32, 32, 32)
                            .addComponent(btnAssignCourse)
                            .addGap(31, 31, 31)
                            .addComponent(btnDelete)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBack))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnBack)
                    .addComponent(btnAssignCourse))
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a faculty member to edit.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    int facultyId;
    try {
        String facultyIdStr = (String) tblFaculty.getValueAt(selectedRow, 0);
        facultyId = Integer.parseInt(facultyIdStr);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Faculty ID in table: " + tblFaculty.getValueAt(selectedRow, 0));
        return;
    } catch (ClassCastException e) {
         JOptionPane.showMessageDialog(this, "Error casting Faculty ID. Expected String but found different type.");
         return;
    }

    FacultyProfile faculty = department.getFacultydirectory().findFacultyById(facultyId);

    if (faculty == null) {
        JOptionPane.showMessageDialog(this, "Faculty not found!");
        return;
    }

    String newEmail = JOptionPane.showInputDialog(this, "Enter new email:", faculty.getEmail());
    if (newEmail == null) return;

    String newPosition = JOptionPane.showInputDialog(this, "Enter new position/title:", faculty.getPosition());
    if (newPosition == null) return;

    String newOffice = JOptionPane.showInputDialog(this, "Enter new office location:", faculty.getOfficeLocation());
    if (newOffice == null) return;

    faculty.setEmail(newEmail);
    faculty.setPosition(newPosition);
    faculty.setOfficeLocation(newOffice);

    JOptionPane.showMessageDialog(this, "Faculty information updated successfully!");
    populateTable();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. Get Faculty ID
        int facultyId;
        try {
             
             String facultyIdStr = (String) tblFaculty.getValueAt(tblFaculty.convertRowIndexToModel(selectedRow), 0); 
             facultyId = Integer.parseInt(facultyIdStr);
        } catch (NumberFormatException | ClassCastException e) {
              JOptionPane.showMessageDialog(this, "Invalid Faculty ID format in table.", "Error", JOptionPane.ERROR_MESSAGE);
              return;
        } catch (IndexOutOfBoundsException e) {
             JOptionPane.showMessageDialog(this, "Error getting data from selected row.", "Error", JOptionPane.ERROR_MESSAGE);
             return;
        }


        // 2. Find FacultyProfile
        FacultyProfile facultyToDelete = department.getFacultydirectory().findFacultyById(facultyId);
        if (facultyToDelete == null) {
            JOptionPane.showMessageDialog(this, "Selected faculty not found in the directory. Maybe already deleted?", "Error", JOptionPane.ERROR_MESSAGE);
            populateTable(); 
            return;
        }

        // 3. Get associated Person
        Person personToDelete = facultyToDelete.getPerson();
        if (personToDelete == null) {
             JOptionPane.showMessageDialog(this, "Error: Faculty profile is not linked to a person.", "Error", JOptionPane.ERROR_MESSAGE);
             return; 
        }

        // 4. Find the associated UserAccount
        UserAccount accountToDelete = null;
        UserAccountDirectory uaDirectory = department.getUseraccountdirectory();
        // Check if the directory and its list exist before iterating
        if (uaDirectory != null && uaDirectory.getUserAccountDirectory() != null) { 
            // Iterate through the list obtained from getUserAccountDirectory()
            for (UserAccount ua : uaDirectory.getUserAccountDirectory()) { 
                // Compare the profile associated with the user account to the faculty profile we want to delete
                // Use the correct method name getAssociatedPersonProfile()
                if (ua.getAssociatedPersonProfile() == facultyToDelete) { 
                    accountToDelete = ua; // Found the matching account
                    break; 
                }
            }
        }
        // *** Finding logic done ***

        // 5. Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to permanently delete faculty member '" + personToDelete.getName() + "'?\nThis will also delete their associated user account (if one exists).", 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // 6. If confirmed, perform deletions
        if (confirm == JOptionPane.YES_OPTION) {
            boolean accountRemoved = false;
            boolean facultyRemoved = false;
            boolean personRemoved = false;

            // Delete User Account (if found)
            if (accountToDelete != null) {
                // This relies on the removeUserAccount(UserAccount) method existing in UserAccountDirectory
                accountRemoved = department.getUseraccountdirectory().removeUserAccount(accountToDelete); 
                if (!accountRemoved) {
                     System.err.println("Warning: Could not remove user account for " + personToDelete.getName());
                } else {
                     System.out.println("User account for " + personToDelete.getName() + " removed.");
                }
            } else {
                 System.out.println("Info: No user account found associated with faculty " + personToDelete.getName() + " to delete.");
                 accountRemoved = true; // No account existed, consider it 'removed'
            }

            // Delete Faculty Profile
            // Assuming FacultyDirectory needs a remove method or direct list access
            facultyRemoved = department.getFacultydirectory().getTeacherlist().remove(facultyToDelete);
             if (!facultyRemoved) {
                  System.err.println("Error: Could not remove faculty profile for " + personToDelete.getName());
             } else {
                 System.out.println("Faculty profile for " + personToDelete.getName() + " removed.");
             }

            // Delete Person object
            // Assuming PersonDirectory has the public removePerson method we added
            personRemoved = department.getPersondirectory().removePerson(personToDelete); 
             if (!personRemoved) {
                  System.err.println("Error: Could not remove person object for " + personToDelete.getName());
             } else {
                  System.out.println("Person object for " + personToDelete.getName() + " removed.");
             }


            // 7. Refresh the table
            populateTable();

            // 8. Show final status message
            if (facultyRemoved && personRemoved && accountRemoved) { // Check if all core objects were removed (or didn't need removal)
                 JOptionPane.showMessageDialog(this, "Faculty member '" + personToDelete.getName() + "' and associated data deleted successfully.", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
            } else {
                 JOptionPane.showMessageDialog(this, "An error occurred during deletion. Some data might not have been removed. Please check logs.", "Deletion Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        Container parent = this.getParent();
        if (parent.getLayout() instanceof CardLayout) {
            CardLayout layout = (CardLayout) parent.getLayout();
            layout.previous(parent);
        }
    
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblFaculty.setRowSorter(sorter);

    String type = ((String) cmbSearchType.getSelectedItem()).trim();
    String keyword = txtSearch.getText().trim().toLowerCase();

    if (keyword.isEmpty()) {
        sorter.setRowFilter(null);
        JOptionPane.showMessageDialog(this, "Please enter a keyword to search!");
        return;
    }

    int colIndex = -1;
    for (int i = 0; i < tblFaculty.getColumnCount(); i++) {
        String columnName = tblFaculty.getColumnName(i).trim().toLowerCase();
        if (columnName.contains(type.toLowerCase().replace(" ", ""))) {
            colIndex = i;
            break;
        }
    }

    if (colIndex == -1) {
        colIndex = 1;
    }

    final int colIndexFinal = colIndex;
    sorter.setRowFilter(new RowFilter<DefaultTableModel, Object>() {
        @Override
        public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {
            Object val = entry.getValue(colIndexFinal);
            return val != null && val.toString().toLowerCase().contains(keyword);
        }
    });
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAssignCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCourseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFaculty.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. 获取选定的 FacultyProfile
        int facultyId;
        try {
             String facultyIdStr = (String) tblFaculty.getValueAt(selectedRow, 0);
             facultyId = Integer.parseInt(facultyIdStr);
        } catch (NumberFormatException | ClassCastException e) {
              JOptionPane.showMessageDialog(this, "Invalid Faculty ID format in table.");
              return;
        }

        FacultyProfile selectedFaculty = department.getFacultydirectory().findFacultyById(facultyId);
        if (selectedFaculty == null) {
            JOptionPane.showMessageDialog(this, "Selected faculty not found in directory.");
            return;
        }

        // 2. 创建对话框组件
        JComboBox<String> semesterComboBox = new JComboBox<>();
        JComboBox<CourseOffer> courseComboBox = new JComboBox<>();

        // 3. 填充学期下拉框
        Calendar calendar = department.getCalendar();
        DefaultComboBoxModel<String> semesterModel = new DefaultComboBoxModel<>();
        if(calendar.getAllSemesterNames() == null || calendar.getAllSemesterNames().isEmpty()){
            JOptionPane.showMessageDialog(this, "No semesters found in the calendar.");
            return;
        }
        for (String semesterName : calendar.getAllSemesterNames()) {
            semesterModel.addElement(semesterName);
        }
        semesterComboBox.setModel(semesterModel);

        // 4. 添加学期选择事件监听器以更新课程列表
        semesterComboBox.addActionListener(e -> {
            String selectedSemester = (String) semesterComboBox.getSelectedItem();
            if (selectedSemester != null) {
                CourseSchedule schedule = calendar.getCourseSchedule(selectedSemester);
                DefaultComboBoxModel<CourseOffer> courseModel = new DefaultComboBoxModel<>();
                if (schedule != null) {
                    for (CourseOffer co : schedule.getSchedule()) {
                        // CourseOffer.toString() 默认显示课程编号 (course number)
                        courseModel.addElement(co); 
                    }
                }
                courseComboBox.setModel(courseModel);
            }
        });

         // 5. 初始填充课程列表（如果学期有默认选项）
         if (semesterComboBox.getItemCount() > 0) {
             semesterComboBox.setSelectedIndex(0); // 这将自动触发上面的 ActionListener
         }

        // 6. 显示对话框
        Object[] message = {
            "Select Semester:", semesterComboBox,
            "Select Course Offering (by Course Number):", courseComboBox
        };

        int option = JOptionPane.showConfirmDialog(this, message, "Assign Course to " + selectedFaculty.getPerson().getName(), JOptionPane.OK_CANCEL_OPTION);

        // 7. 执行分配
        if (option == JOptionPane.OK_OPTION) {
            CourseOffer selectedCourseOffer = (CourseOffer) courseComboBox.getSelectedItem();
            if (selectedCourseOffer != null) {
                // 执行分配
                selectedCourseOffer.AssignAsTeacher(selectedFaculty);
                JOptionPane.showMessageDialog(this, "Faculty " + selectedFaculty.getPerson().getName() + " assigned to course " + selectedCourseOffer.getCourseName() + " successfully.");
                // 可以在此刷新（如果需要）
                // populateTable(); 
            } else {
                JOptionPane.showMessageDialog(this, "No course selected or no courses available for the selected semester.");
            }
        }
    }//GEN-LAST:event_btnAssignCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignCourse;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblFaculty;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
