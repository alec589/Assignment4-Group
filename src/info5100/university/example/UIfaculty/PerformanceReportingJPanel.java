/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIfaculty;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.UserAccount;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luwang
 */
public class PerformanceReportingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PerformanceReportingJPanel
     */
    JPanel mainpanel;
    Department department;
    UserAccount currentUser;
    
    public PerformanceReportingJPanel(JPanel mainpanel, Department department, UserAccount currentUser) {
        initComponents();
        this.mainpanel = mainpanel;
        this.department = department;
        this.currentUser = currentUser;
        
        setPreferredSize(new Dimension(800, 600));
        
        populateSemesterCombo();
        cmbCourse.setSelectedIndex(-1);
        
        cmbSemester.addActionListener(e ->populateCourseCombo());
        btnExport.addActionListener(e -> exportReportToCsv());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldAverageGrade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldEnrollCount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDistribution = new javax.swing.JTable();
        btnExport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnGenerate = new javax.swing.JButton();
        fieldTuition = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setText("Semester:");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Course:");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Average Grade");

        jLabel4.setText("Enrollment Count");

        tblDistribution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Grade", "Count"
            }
        ));
        jScrollPane1.setViewportView(tblDistribution);

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        jLabel5.setText("Grade Distribution:");

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        jLabel6.setText("Total Tuition:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldAverageGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fieldEnrollCount, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)))
                        .addComponent(btnGenerate)
                        .addGap(18, 18, 18)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(fieldTuition, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport)
                    .addComponent(btnGenerate))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldAverageGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fieldEnrollCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTuition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mainpanel.remove(this);
        CardLayout layout = (CardLayout)mainpanel.getLayout();
        layout.previous(mainpanel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:
        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();
        
        CourseOffer co = department.getCalendar().getCourseSchedule(semester).getCourseOfferByName(courseName);
        ArrayList<Seat> seatList = co.getSeatlist();
        
        //average grade and enrollcount
        double totalScore = 0;
        int enrollCount = 0;
        
        for (Seat s : seatList) {
            if (!s.isOccupied()) continue;
                
            SeatAssignment sa = s.getSeatassignment();
            if (sa == null) continue;
                    
                Double score = sa.calculateFinalCourseScore();
                if (score == null) continue;
                    enrollCount ++;
                    totalScore += score;
        }
        
        double avgScore = 0;
        if (enrollCount >0){
            avgScore = totalScore / enrollCount;
        } else {
            JOptionPane.showMessageDialog(this, "This course hasn't started yet (no graded enrollments).", "info", JOptionPane.INFORMATION_MESSAGE);
        }

        double avgGrade = SeatAssignment.convertToGPA(avgScore);

        fieldAverageGrade.setText(String.valueOf(avgGrade));
        fieldEnrollCount.setText(String.valueOf(enrollCount));
        
        //grade distribution
        DefaultTableModel model = (DefaultTableModel)tblDistribution.getModel();
        model.setRowCount(0);
        
        Map<Double, Integer> gradeCountMap = new HashMap<>();
        
        for (Seat s : seatList) {
            if (!s.isOccupied()) continue;
                
            SeatAssignment sa = s.getSeatassignment();
            if (sa == null) continue;
                    
                Double score = sa.calculateFinalCourseScore();
                if (score == null) continue;
                    
                    double grade = SeatAssignment.convertToGPA(score);
                    gradeCountMap.put(grade, gradeCountMap.getOrDefault(grade, 0) + 1);

        }
        
        for (Map.Entry<Double, Integer> entry : gradeCountMap.entrySet()) {
            Object[] row = new Object[2];
            row[0] = entry.getKey();
            row[1] = entry.getValue();
            
            model.addRow(row);
        }
                    
        // tuition
        Course c = co.getCourse();
        int unitPrice = c.getCoursePrice();
        int credits = c.getCredits();
        int totalTuition = enrollCount * unitPrice *credits;
        fieldTuition.setText(String.valueOf(totalTuition));
        
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_btnExportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JTextField fieldAverageGrade;
    private javax.swing.JTextField fieldEnrollCount;
    private javax.swing.JTextField fieldTuition;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDistribution;
    // End of variables declaration//GEN-END:variables
    
    private void populateSemesterCombo() {
        cmbSemester.removeAllItems();
        
        Collection<String> semesterNames = department.getCalendar().getAllSemesterNames();
        for (String semester: semesterNames){
            cmbSemester.addItem(semester);
        }
        
        cmbSemester.setSelectedIndex(-1);
    }

    private void populateCourseCombo() {
        cmbCourse.removeAllItems();;
        
        String semester = (String) cmbSemester.getSelectedItem();
        ArrayList<CourseOffer> courseOfferList = department.getCalendar().getCourseSchedule(semester).getSchedule();
        
        FacultyProfile fp = (FacultyProfile)currentUser.getAssociatedPersonProfile();

        for (CourseOffer co : courseOfferList){
            if (co.getFacultyProfile() == null) continue;
            if (!co.getFacultyProfile().equals (fp)) continue;
            cmbCourse.addItem(co.getCourseName());
        }
        
        cmbCourse.setSelectedIndex(-1);
    }

    private void exportReportToCsv() {
        String semester = (String) cmbSemester.getSelectedItem();
        String course = (String) cmbCourse.getSelectedItem();
        String avg = fieldAverageGrade.getText().trim();
        String count = fieldEnrollCount.getText().trim();
        String tuition = fieldTuition.getText().trim();
        DefaultTableModel model = (DefaultTableModel) tblDistribution.getModel();

        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new java.io.File(
            String.format("report_%s_%s.csv",
                semester == null ? "NA" : semester.replaceAll("\\s+",""),
                course == null ? "NA" : course.replaceAll("\\s+",""))
        ));
        int ret = fc.showSaveDialog(this);
        if (ret != JFileChooser.APPROVE_OPTION) return;

        java.io.File file = fc.getSelectedFile();

        try (java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
             java.io.OutputStreamWriter osw =
                 new java.io.OutputStreamWriter(fos, java.nio.charset.StandardCharsets.UTF_8);
             java.io.BufferedWriter bw = new java.io.BufferedWriter(osw)) {

            fos.write(new byte[] {(byte)0xEF, (byte)0xBB, (byte)0xBF});

            bw.write("Semester," + quote(semester));
            bw.newLine();
            bw.write("Course," + quote(course));
            bw.newLine();
            bw.write("Average Grade," + quote(avg));
            bw.newLine();
            bw.write("Enrollment Count," + quote(count));
            bw.newLine();
            bw.write("Total Tuition," + quote(tuition));
            bw.newLine();
            bw.newLine();

            bw.write("Grade,Count");
            bw.newLine();

            for (int r = 0; r < model.getRowCount(); r++) {
                Object g = model.getValueAt(r, 0);
                Object c = model.getValueAt(r, 1);
                bw.write(quote(String.valueOf(g)) + "," + quote(String.valueOf(c)));
                bw.newLine();
            }

            bw.flush();
            JOptionPane.showMessageDialog(this, "Exported: " + file.getName());

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Export failed: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String quote(String s) {
        if (s == null) return "";
        boolean need = s.contains(",") || s.contains("\"") || s.contains("\n") || s.contains("\r");
        String t = s.replace("\"", "\"\"");
        return need ? ("\"" + t + "\"") : t;
    }



}
