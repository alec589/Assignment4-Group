/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIfaculty;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.Assignment;
import info5100.university.example.Persona.Faculty.FacultyAssignment;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Faculty.StudentAssignment;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.Persona.UserAccount;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.DefaultCellEditor;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author luwang
 */
public class StudentManagementJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentManagmentJPanel
     */
    JPanel mainpanel;
    Department department;
    UserAccount currentUser;
    ArrayList<StudentAssignment> rowBindings = new ArrayList<>();
    public StudentManagementJPanel(JPanel mainpanel, Department department, UserAccount currentUser) {
        initComponents();
        this.mainpanel = mainpanel;
        this.department = department;
        this.currentUser = currentUser;
        
        setPreferredSize(new Dimension(800, 600));
        
        populateSemesterCombo();
        cmbCourse.setSelectedIndex(-1);
        
        cmbSemester.addActionListener(e ->populateCourseCombo());
        
        tblAssignment.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldCompleted = new javax.swing.JTextField();
        cmbSemester = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fieldMissing = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fieldCurrentGrade = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fieldCumGPA = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fieldTermGPA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        fieldCredit = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        fieldClassGPA = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        fieldRank = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        fieldFinalLetterGrade = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAssignment = new javax.swing.JTable();
        btnViewStudent = new javax.swing.JButton();
        btnProgress = new javax.swing.JButton();
        btnTranscript = new javax.swing.JButton();
        btnRanking = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnViewAssignment = new javax.swing.JButton();
        btnUpdateGrade = new javax.swing.JButton();

        jLabel1.setText("Semester:");

        fieldCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCompletedActionPerformed(evt);
            }
        });

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        jLabel2.setText("Course:");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name"
            }
        ));
        jScrollPane1.setViewportView(tblStudent);

        jLabel3.setText("Enrolled Student:");

        jLabel5.setText("Completed");

        jLabel6.setText("Missing");

        jLabel7.setText("Current Grade");

        jLabel9.setText("Term GPA");

        jLabel10.setText("Cum GPA");

        jLabel11.setText("Total Credits");

        fieldCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCreditActionPerformed(evt);
            }
        });

        jLabel13.setText("Rank");

        jLabel14.setText("Class GPA");

        jLabel17.setText("Final Letter Grade");

        tblAssignment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Assignment", "Weight", "Total Score", "Score"
            }
        ));
        jScrollPane2.setViewportView(tblAssignment);

        btnViewStudent.setText("View Student");
        btnViewStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewStudentActionPerformed(evt);
            }
        });

        btnProgress.setText("View Progress");
        btnProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgressActionPerformed(evt);
            }
        });

        btnTranscript.setText("View Transcript Summary");
        btnTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranscriptActionPerformed(evt);
            }
        });

        btnRanking.setText("View Ranking");
        btnRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankingActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnViewAssignment.setText("View Assignment");
        btnViewAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAssignmentActionPerformed(evt);
            }
        });

        btnUpdateGrade.setText("Update Grade");
        btnUpdateGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGradeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewAssignment)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateGrade))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(btnProgress))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(fieldMissing, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                            .addComponent(fieldCompleted)
                                            .addComponent(fieldCurrentGrade))))
                                .addGap(19, 19, 19)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnTranscript)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jLabel10))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(fieldCumGPA, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                                    .addComponent(fieldTermGPA)))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fieldCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnRanking, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel17))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(fieldFinalLetterGrade, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                            .addComponent(fieldRank, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldClassGPA, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(17, 17, 17))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1)
                                    .addComponent(btnViewStudent))))
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewStudent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnProgress)
                                .addComponent(btnTranscript))
                            .addComponent(btnRanking))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(fieldCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldTermGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13)
                            .addComponent(fieldRank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(fieldMissing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(fieldCumGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(fieldClassGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(fieldCurrentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(fieldCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldFinalLetterGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(btnViewAssignment)
                    .addComponent(btnUpdateGrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mainpanel.remove(this);
        CardLayout layout = (CardLayout)mainpanel.getLayout();
        layout.previous(mainpanel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnViewStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewStudentActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblStudent.getModel();
        model.setRowCount(0);
        
        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();

        if (semester == null || courseName == null) {
            JOptionPane.showMessageDialog(this, "Please select both semester and course.");
            return;
        }
        
        CourseSchedule cs = department.getCalendar().getCourseSchedule(semester);
        if (cs == null) {
            JOptionPane.showMessageDialog(this, "No course schedule found for this semester.");
            return;
        }
        
        CourseOffer co = cs.getCourseOfferByName(courseName);
        if (co == null) {
            JOptionPane.showMessageDialog(this, "Course not found in this semester.");
            return;
        }

        ArrayList<Seat> seatList = co.getSeatlist();
        
        for (Seat s : seatList){
            StudentProfile sp = s.getStudentProfile();
            
            if (sp == null) {
                continue;
            }
            
            Object[] row = new Object[3];
            row[0] = sp;
            row[1] = sp.getFirstName().trim();
            row[2] = sp.getLastName().trim();
            
            model.addRow(row);
        }
              
    }//GEN-LAST:event_btnViewStudentActionPerformed

    private void fieldCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCompletedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCompletedActionPerformed

    private void btnProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgressActionPerformed
        // TODO add your handling code here:

        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();
        
        int selectedRow = tblStudent.getSelectedRow();
        if (selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a student");
            return;
        }
        
        StudentProfile selectedStudent = (StudentProfile) tblStudent.getValueAt(selectedRow, 0);
        SeatAssignment sa = selectedStudent.getTranscript().getCourseLoadBySemester(semester).findSeatAssignmentByCourseName(courseName);
        
        int completed = 0;
        int missing = 0;
        double totalWeighted = 0.0;
        double totalWeight = 0.0;
                
        for (StudentAssignment stua : sa.getAssignmentRecords().values()){
            Double score = stua.getScore();
            Assignment a = stua.getAssignment();
                
            if (score == null){
                missing ++;
                continue;
            }

            if ( score >= 60.0) {
                completed++;
                double weight = a.getWeight();
                double pct = score / a.getMaxPoints();
                totalWeighted += pct*weight;
                totalWeight += weight;
                    
            } else {
                    missing++;
            }
        }
            
        Double finalCourseScore = null;
        if (totalWeight > 0) {
            finalCourseScore = totalWeighted / totalWeight * 100.0;
        }
 
        fieldCompleted.setText(String.valueOf(completed));
        fieldMissing.setText(String.valueOf(missing));
        fieldCurrentGrade.setText(String.format("%.1f", finalCourseScore));
        
    }//GEN-LAST:event_btnProgressActionPerformed

    private void btnTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranscriptActionPerformed
        // TODO add your handling code here:
        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();
        
        int selectedRow = tblStudent.getSelectedRow();
        if (selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a student");
            return;
        }
        
        StudentProfile selectedStudent = (StudentProfile) tblStudent.getValueAt(selectedRow, 0);
        SeatAssignment sa = selectedStudent.getTranscript().getCourseLoadBySemester(semester).findSeatAssignmentByCourseName(courseName);
        
        double termScore = sa.calculateFinalCourseScore();
        double termGPA = SeatAssignment.convertToGPA(termScore);
        fieldTermGPA.setText(String.valueOf(termGPA));
        
        double totalGPA = 0.0;  
        int totalCredits = 0;

        for (SeatAssignment saCumGPA : selectedStudent.getCourseList()) { 
            Double finalScore = sa.calculateFinalCourseScore(); 
            if (finalScore == null) continue;  

            double gpa = SeatAssignment.convertToGPA(finalScore);
            int credits = sa.getSeat().getCourseCredits();  

            totalGPA += gpa * credits;
            totalCredits += credits;
        }

        Double cumGPA = totalGPA / totalCredits;
        fieldCumGPA.setText(cumGPA == null ? "-" : String.format("%.1f", cumGPA));
        fieldCredit.setText(String.valueOf(totalCredits));
        
        
    }//GEN-LAST:event_btnTranscriptActionPerformed

    private void btnViewAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAssignmentActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblAssignment.getModel();
        model.setRowCount(0);
        rowBindings.clear();
        
        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();
        
        int selectedRow = tblStudent.getSelectedRow();
        if (selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a student");
            return;
        }
        
        StudentProfile selectedStudent = (StudentProfile) tblStudent.getValueAt(selectedRow, 0);
        SeatAssignment sa = selectedStudent.getTranscript().getCourseLoadBySemester(semester).findSeatAssignmentByCourseName(courseName);
        
        if (sa == null) {
            JOptionPane.showMessageDialog(this, "This student did not take this course");
            return;
        }
        
        for (StudentAssignment stua : sa.getAssignmentRecords().values()){
            Assignment a = stua.getAssignment();
            
            Object[] row = new Object[4];
            row[0] = a.getAssignmentName();
            row[1] = a.getWeight();
            row[2] = a.getMaxPoints();
            row[3] = stua.getScore();
            
            model.addRow(row);
            rowBindings.add(stua);
        }
        
        NumberFormatter nf = new NumberFormatter(new DecimalFormat("#0.##"));
        nf.setAllowsInvalid(false);
        JFormattedTextField tf = new JFormattedTextField(nf);
        tblAssignment.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(tf));

        model.addTableModelListener(e -> {
            if (e.getType() != TableModelEvent.UPDATE) return;
            if (e.getColumn() != 3) return;

            int row = e.getFirstRow();
            Object v = model.getValueAt(row, 3);
            StudentAssignment stua = rowBindings.get(row);

            if (v == null) {
                stua.clearScore();
                model.setValueAt(null, row, 3);
                return;
            }

            double score = (v instanceof Number) ?
                    ((Number) v).doubleValue() :
                    Double.parseDouble(v.toString());

            int max = stua.getAssignment().getMaxPoints();
            if (score < 0) score = 0;
            if (score > max) score = max;

            stua.setScore(score);
            
        });
        
        tblAssignment.getColumnModel().getColumn(0).setPreferredWidth(180);
        tblAssignment.getColumnModel().getColumn(1).setPreferredWidth(50);
        tblAssignment.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblAssignment.getColumnModel().getColumn(3).setPreferredWidth(50);
    }//GEN-LAST:event_btnViewAssignmentActionPerformed

    private void btnRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankingActionPerformed
        // TODO add your handling code here:
        String semester = (String) cmbSemester.getSelectedItem();
        String courseName = (String) cmbCourse.getSelectedItem();
        
        int selectedRow = tblStudent.getSelectedRow();
        if (selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a student");
            return;
        }
        
        StudentProfile selectedStudent = (StudentProfile) tblStudent.getValueAt(selectedRow, 0);
        SeatAssignment seatAssignment = selectedStudent.getTranscript().getCourseLoadBySemester(semester).findSeatAssignmentByCourseName(courseName);
        
        ArrayList<StudentProfile> allStudents = department.getStudentdirectory().getStudentlist();
        ArrayList<StudentProfile> sorted = new ArrayList<>(allStudents);
        
        sorted.sort((s1, s2) -> {
            CourseLoad cl1 = s1.getTranscript().getCourseLoadBySemester(semester);
            SeatAssignment sa1 = (cl1 == null) ? null : cl1.findSeatAssignmentByCourseName(courseName);
            Double g1 = (sa1 == null) ? null : sa1.calculateFinalCourseScore();

            CourseLoad cl2 = s2.getTranscript().getCourseLoadBySemester(semester);
            SeatAssignment sa2 = (cl2 == null) ? null : cl2.findSeatAssignmentByCourseName(courseName);
            Double g2 = (sa2 == null) ? null : sa2.calculateFinalCourseScore();

            if (g1 == null && g2 == null) return 0;
            if (g1 == null) return 1;
            if (g2 == null) return -1;
            return Double.compare(g2, g1);
        });

        CourseLoad selCL = selectedStudent.getTranscript().getCourseLoadBySemester(semester);
        SeatAssignment selSA = (selCL == null) ? null : selCL.findSeatAssignmentByCourseName(courseName);
        Double selScore = (selSA == null) ? null : selSA.calculateFinalCourseScore();

        if (selScore == null) {
            fieldRank.setText("N/A");
            return;
        }

        int population = 0;
        for (StudentProfile sp : sorted) {
            CourseLoad cl = sp.getTranscript().getCourseLoadBySemester(semester);
            SeatAssignment sa = (cl == null) ? null : cl.findSeatAssignmentByCourseName(courseName);
            Double sc = (sa == null) ? null : sa.calculateFinalCourseScore();
            if (sc != null) population++;
        }

        int rank = 0;
        for (StudentProfile sp : sorted) {
            CourseLoad cl = sp.getTranscript().getCourseLoadBySemester(semester);
            SeatAssignment sa = (cl == null) ? null : cl.findSeatAssignmentByCourseName(courseName);
            Double sc = (sa == null) ? null : sa.calculateFinalCourseScore();
            if (sc == null) continue;
            rank++;
            if (sp == selectedStudent) break;
        }

        fieldRank.setText(rank + " / " + population);

        CourseSchedule cs = department.getCalendar().getCourseSchedule(semester);
        CourseOffer co = cs.getCourseOfferByName(courseName);
        
        double totalGPA = 0.0;
        int count = 0;
        
        for (Seat s : co.getSeatlist()) {
            SeatAssignment sa = s.getSeatassignment();
            if (sa == null) continue;                       

            Double courseScore = sa.calculateFinalCourseScore();
            if (courseScore == null) continue;             

            double courseGPA = SeatAssignment.convertToGPA(courseScore);
            totalGPA += courseGPA;
            count++;
        }

        if (count == 0) {
            fieldClassGPA.setText("-");                     
            return;
        }

        double classGPA = totalGPA / count;
        fieldClassGPA.setText(String.format("%.1f", classGPA));
    }//GEN-LAST:event_btnRankingActionPerformed

    private void fieldCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCreditActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_fieldCreditActionPerformed

    private void btnUpdateGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGradeActionPerformed
        // TODO add your handling code here:
        int[] rows = tblAssignment.getSelectedRows();
        if (rows == null || rows.length == 0) {
            JOptionPane.showMessageDialog(this, "Select at least one assignment");
            return;
        }

        double total = 0.0;
        double usedWeight = 0.0;

        for (int r : rows) {
            StudentAssignment stua = rowBindings.get(r);
            if (stua == null) continue;

            Assignment a = stua.getAssignment();
            if (a == null) continue;

            Double score = stua.getScore();            
            if (score == null) continue;

            int max = a.getMaxPoints();                 
            if (max <= 0) continue;

            double w = a.getWeight();                   
            double pct = (score / max);                

            total += pct * w;
            usedWeight += w;
        }

        if (usedWeight <= 0) {
            JOptionPane.showMessageDialog(this, "No valid scores in selected rows");
            return;
        }

        double finalPct = (total / usedWeight) * 100.0; 
        String letter = SeatAssignment.convertToLetter(finalPct);
        fieldFinalLetterGrade.setText(letter);            
        
    }//GEN-LAST:event_btnUpdateGradeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProgress;
    private javax.swing.JButton btnRanking;
    private javax.swing.JButton btnTranscript;
    private javax.swing.JButton btnUpdateGrade;
    private javax.swing.JButton btnViewAssignment;
    private javax.swing.JButton btnViewStudent;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JTextField fieldClassGPA;
    private javax.swing.JTextField fieldCompleted;
    private javax.swing.JTextField fieldCredit;
    private javax.swing.JTextField fieldCumGPA;
    private javax.swing.JTextField fieldCurrentGrade;
    private javax.swing.JTextField fieldFinalLetterGrade;
    private javax.swing.JTextField fieldMissing;
    private javax.swing.JTextField fieldRank;
    private javax.swing.JTextField fieldTermGPA;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tblAssignment;
    private javax.swing.JTable tblStudent;
    // End of variables declaration//GEN-END:variables

    private void populateSemesterCombo() {
        cmbSemester.removeAllItems();
        
        Collection<String> semesterNames = department.getCalendar().getAllSemesterNames();
        for (String semester: semesterNames){
            cmbSemester.addItem(semester);
        }
        
        cmbSemester.setSelectedIndex(-1);
    }

    private void populateCourseCombo() {
        cmbCourse.removeAllItems();;
        
        String semester = (String) cmbSemester.getSelectedItem();
        ArrayList<CourseOffer> courseOfferList = department.getCalendar().getCourseSchedule(semester).getSchedule();
        
        FacultyProfile fp = (FacultyProfile)currentUser.getAssociatedPersonProfile();

        for (CourseOffer co : courseOfferList){
            if (co.getFacultyProfile() == null) continue;
            if (!co.getFacultyProfile().equals (fp)) continue;
            cmbCourse.addItem(co.getCourseName());
        }
        
        cmbCourse.setSelectedIndex(-1);
    }

    

    
}
