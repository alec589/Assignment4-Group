/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package info5100.university.example.UIRegister;


import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Calendar;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import java.awt.CardLayout;
import java.util.Collection;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lichun
 */
public class CourseOfferingManagementJPanel extends javax.swing.JPanel {
JPanel mainpanel;
Department department;
Calendar calendar;
CourseSchedule courseSchedule;
    /**
     * Creates new form CourseOfferingManagementJPanel
     */
    public CourseOfferingManagementJPanel(JPanel mainpanel, Department department) {
        initComponents();
        this.mainpanel=mainpanel;
        this.department=department;
        this.calendar=department.getCalendar();
        populateCmbSemester();
        populateCmbTeacher();
        populateSpnStartTime();
        populateSpnEndTime();
        //ViewMode();
        
    if (cmbSemester.getItemCount() > 0) {
        cmbSemester.setSelectedIndex(0);
        populateTableCourseOffering(cmbSemester.getSelectedItem().toString()); 
    } else {  
        populateTableCourseOffering(null);
    }  
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblCourseName = new javax.swing.JLabel();
        lblCredits = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAssignFaculty = new javax.swing.JButton();
        fieldCourseName = new javax.swing.JTextField();
        fieldCredits = new javax.swing.JTextField();
        lblTeacher = new javax.swing.JLabel();
        cmbTeacher = new javax.swing.JComboBox<>();
        lblSeatNumber = new javax.swing.JLabel();
        fieldSeatNumber = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        cmbDate = new javax.swing.JComboBox<>();
        lblStartTime = new javax.swing.JLabel();
        btnSetRelavantInformation = new javax.swing.JButton();
        spnStartTime = new javax.swing.JSpinner();
        lblEndTime = new javax.swing.JLabel();
        spnEndTime = new javax.swing.JSpinner();
        lblBuildingNumber = new javax.swing.JLabel();
        fieldBuildingNumber = new javax.swing.JTextField();
        lblClassroomNumber = new javax.swing.JLabel();
        lblFloorNumber = new javax.swing.JLabel();
        fieldFloorNumber = new javax.swing.JTextField();
        fieldClassroomNumber = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCourseOffering = new javax.swing.JTable();
        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnUpdate = new javax.swing.JButton();
        lblSearchCourse = new javax.swing.JLabel();
        fieldSearchCourse = new javax.swing.JTextField();
        btnSearchCourse = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblTitle.setText("Course Offering Management");

        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblCourseName.setText("Course Name");

        lblCredits.setText("Credits");

        btnCreate.setText("Create ");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAssignFaculty.setText("Assign Faculty");
        btnAssignFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignFacultyActionPerformed(evt);
            }
        });

        lblTeacher.setText("Teacher");

        cmbTeacher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblSeatNumber.setText("Seat Number");

        lblDate.setText("Date");

        cmbDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        lblStartTime.setText("StartTime");

        btnSetRelavantInformation.setText("Set Relavant Information");
        btnSetRelavantInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetRelavantInformationActionPerformed(evt);
            }
        });

        lblEndTime.setText("EndTime");

        lblBuildingNumber.setText("Building Number");

        lblClassroomNumber.setText("Classroom Number");

        lblFloorNumber.setText("Floor Number");

        fieldFloorNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldFloorNumberActionPerformed(evt);
            }
        });

        tblCourseOffering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Course Number", "Course Name", "Teacher", "Credits", "Classroom", "Seat Capaticy", "Time Schedule"
            }
        ));
        jScrollPane2.setViewportView(tblCourseOffering);

        lblSemester.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblSearchCourse.setText("Search Course");

        btnSearchCourse.setText("Search");
        btnSearchCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCourseActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnBack)
                        .addGap(162, 162, 162)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(280, 280, 280)
                        .addComponent(lblSearchCourse)
                        .addGap(15, 15, 15)
                        .addComponent(fieldSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnSearchCourse))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(btnCreate)
                                .addGap(98, 98, 98)
                                .addComponent(lblCourseName)
                                .addGap(31, 31, 31)
                                .addComponent(fieldCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(lblCredits)
                                .addGap(18, 18, 18)
                                .addComponent(fieldCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(btnDelete)
                                .addGap(88, 88, 88)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnAssignFaculty)
                                .addGap(115, 115, 115)
                                .addComponent(lblTeacher)
                                .addGap(14, 14, 14)
                                .addComponent(cmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSetRelavantInformation)
                                .addGap(28, 28, 28)
                                .addComponent(lblSeatNumber)
                                .addGap(14, 14, 14)
                                .addComponent(fieldSeatNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSave)
                                .addGap(43, 43, 43)
                                .addComponent(lblBuildingNumber)
                                .addGap(13, 13, 13)
                                .addComponent(fieldBuildingNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblFloorNumber)
                                .addGap(12, 12, 12)
                                .addComponent(fieldFloorNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblClassroomNumber)
                                .addGap(8, 8, 8)
                                .addComponent(fieldClassroomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(lblDate)
                                .addGap(13, 13, 13)
                                .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblStartTime)
                                .addGap(5, 5, 5)
                                .addComponent(spnStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblEndTime)
                                .addGap(9, 9, 9)
                                .addComponent(spnEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(lblTitle))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchCourse))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCourseName)
                            .addComponent(fieldCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCredits)
                            .addComponent(fieldCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAssignFaculty)
                    .addComponent(lblTeacher)
                    .addComponent(cmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSetRelavantInformation)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSeatNumber)
                            .addComponent(fieldSeatNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBuildingNumber)
                        .addComponent(btnUpdate)
                        .addComponent(btnSave))
                    .addComponent(fieldBuildingNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFloorNumber)
                    .addComponent(fieldFloorNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClassroomNumber)
                    .addComponent(fieldClassroomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartTime)
                    .addComponent(spnStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndTime)
                    .addComponent(spnEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldFloorNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldFloorNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldFloorNumberActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         mainpanel.remove(this);
         CardLayout layout =(CardLayout)mainpanel.getLayout();
        layout.previous(mainpanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
     
        //空值检测 
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }         
        String selectedSemester= cmbSemester.getSelectedItem().toString();
      
        CourseSchedule schedule = calendar.getCourseSchedule(selectedSemester);
        if (schedule == null) {
        JOptionPane.showMessageDialog(this, "The selected semester schedule does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        String courseName=fieldCourseName.getText();
        int credits;    
       
       if (courseName.isBlank()||fieldCredits.getText().isBlank()||
              selectedSemester.isBlank()){
        JOptionPane.showMessageDialog(this,"Course Number, Name, and Credits are required." , "Error", JOptionPane.ERROR_MESSAGE);
        return;
       
       }
       try{  
           credits =Integer.parseInt(fieldCredits.getText());
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
       
        Course course = department.getCourseCatalog().getCourseByName(courseName);
        if (course == null) {
            
            course = department.getCoursecatalog().newCourse(courseName, credits);
        }
        CourseOffer newOffer = schedule.newCourseOffer(course.getCourseNumber());
   
         populateTableCourseOffering(selectedSemester);
         JOptionPane.showMessageDialog(null, "Successfully create a new courseoffering","Success",JOptionPane.INFORMATION_MESSAGE);
         fieldCourseName.setText("");
         
         fieldCredits.setText("");
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
         if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }         
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        int selectedRow=tblCourseOffering.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please  selected a  courseoffer from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
        int dialogButton=JOptionPane.YES_NO_OPTION;
        int dialogResult=JOptionPane.showConfirmDialog(null, "Are u sure you want to update courseoffering Information","Warning",dialogButton);
        if(dialogResult==JOptionPane.YES_OPTION){
            int courseNumber= (Integer)tblCourseOffering.getValueAt(selectedRow, 0);
            courseSchedule=department.getCalendar().getCourseSchedule(selectedSemester);
            CourseOffer co= courseSchedule.getCourseOfferByNumber(courseNumber);
        fieldCourseName.setText(co.getCourseName()); 
        fieldCredits.setText(String.valueOf(co.getCreditHours()));
        cmbTeacher.setSelectedIndex(0);
        fieldSeatNumber.setText(String.valueOf(co.getSeatlist().size()));
        fieldBuildingNumber.setText(String.valueOf(co.getBuildingNumber()));
        fieldFloorNumber.setText(String.valueOf(co.getFloorNumber()));
        fieldClassroomNumber.setText(String.valueOf(co.getClassroomNumber()));
        cmbDate.setSelectedItem(co.getDayOfWeek());
        spnStartTime.setValue(co.getStartTime());
        spnEndTime.setValue(co.getEndTime());
        fieldCourseName.setEnabled(false);
        fieldCredits.setEnabled(false);
        }
        }       
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
         if (cmbSemester.getSelectedItem() != null) {
        populateTableCourseOffering(cmbSemester.getSelectedItem().toString());
    }
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnAssignFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignFacultyActionPerformed
        // TODO add your handling code here:
        if (cmbTeacher.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a teacher first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }     
        String facultyName= cmbTeacher.getSelectedItem().toString();
        
        FacultyProfile fp =department.getFacultydirectory().findFacultyByName(facultyName);
        
        
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }         
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        
        int selectedRow=tblCourseOffering.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please  selected a  product from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
        int dialogButton=JOptionPane.YES_NO_OPTION;
        int dialogResult=JOptionPane.showConfirmDialog(null, "Are u sure you want to assign a teacher for the selected courseoffering","Warning",dialogButton);
        if(dialogResult==JOptionPane.YES_OPTION){
            int courseNumber= (Integer)tblCourseOffering.getValueAt(selectedRow, 0);
            courseSchedule=department.getCalendar().getCourseSchedule(selectedSemester);
            CourseOffer co= courseSchedule.getCourseOfferByNumber(courseNumber);
            
            co.AssignAsTeacher(fp);
            
            populateTableCourseOffering(selectedSemester);
            cmbTeacher.setSelectedIndex(0);
        }
        }
    }//GEN-LAST:event_btnAssignFacultyActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }         
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        int selectedRow=tblCourseOffering.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please  selected a courseoffer from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
        int dialogButton=JOptionPane.YES_NO_OPTION;
        int dialogResult=JOptionPane.showConfirmDialog(null, "Are u sure you want to delete the selected courseoffering","Warning",dialogButton);
        if(dialogResult==JOptionPane.YES_OPTION){
            int courseNumber= (Integer)tblCourseOffering.getValueAt(selectedRow, 0);
            courseSchedule=department.getCalendar().getCourseSchedule(selectedSemester);
            CourseOffer co= courseSchedule.getCourseOfferByNumber(courseNumber);
            courseSchedule.deleteCourseOffer(co);
            
            populateTableCourseOffering(selectedSemester);}
                    
        }
 
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSetRelavantInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetRelavantInformationActionPerformed
        // TODO add your handling code here:
        
        if (cmbDate.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a teacher first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }  
        String dayOfweek=cmbDate.getSelectedItem().toString();
        int seatNumber;
        int buildingNumber;
        int floorNumber;
        int classroomNumber;
        int startTime=(Integer)spnStartTime.getValue();
        int endTime=(Integer)spnEndTime.getValue();
        
        
        try{  
           seatNumber =Integer.parseInt(fieldSeatNumber.getText());
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
       try{   
           buildingNumber= Integer.parseInt(fieldBuildingNumber.getText());   
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try{   
             floorNumber= Integer.parseInt(fieldFloorNumber.getText());
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{   
            classroomNumber= Integer.parseInt(fieldClassroomNumber.getText());  
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
          
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }         
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        int selectedRow=tblCourseOffering.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please  selected a courseoffer from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
        int dialogButton=JOptionPane.YES_NO_OPTION;
        int dialogResult=JOptionPane.showConfirmDialog(null, "Are u sure you want to set the location the selected courseoffering","Warning",dialogButton);
        if(dialogResult==JOptionPane.YES_OPTION){
            int courseNumber= (Integer)tblCourseOffering.getValueAt(selectedRow, 0);
            courseSchedule=department.getCalendar().getCourseSchedule(selectedSemester);
            CourseOffer co= courseSchedule.getCourseOfferByNumber(courseNumber);
            co.generatSeats(seatNumber);
            co.setLocation(buildingNumber, floorNumber, classroomNumber);
            co.setTimeSchedule(dayOfweek, startTime, endTime);
            
            populateTableCourseOffering(selectedSemester);
            
            fieldSeatNumber.setText("");
            fieldBuildingNumber.setText("");
            fieldFloorNumber.setText("");
            fieldClassroomNumber.setText("");
            cmbDate.setSelectedIndex(0);
            spnStartTime.setValue(7);
            spnEndTime.setValue(7);
            
        }
                    
        }
       

               
    }//GEN-LAST:event_btnSetRelavantInformationActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        
        if (cmbTeacher.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a teacher first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }    
        String facultyName= cmbTeacher.getSelectedItem().toString();
        FacultyProfile fp =department.getFacultydirectory().findFacultyByName(facultyName);
        
        if (cmbDate.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a teacher first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }  
        String dayOfweek=cmbDate.getSelectedItem().toString();
        int seatNumber;
        int buildingNumber;
        int floorNumber;
        int classroomNumber;
        int startTime=(Integer)spnStartTime.getValue();
        int endTime=(Integer)spnEndTime.getValue();
        
        
        try{  
           seatNumber =Integer.parseInt(fieldSeatNumber.getText());
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
       try{   
           buildingNumber= Integer.parseInt(fieldBuildingNumber.getText());   
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try{   
             floorNumber= Integer.parseInt(fieldFloorNumber.getText());
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{   
            classroomNumber= Integer.parseInt(fieldClassroomNumber.getText());  
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please check number input","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedRow=tblCourseOffering.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please  selected a courseoffer from the list","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
        int dialogButton=JOptionPane.YES_NO_OPTION;
        int dialogResult=JOptionPane.showConfirmDialog(null, "Are u sure you want to save those changes","Warning",dialogButton);
        if(dialogResult==JOptionPane.YES_OPTION){
            int courseNumber= (Integer)tblCourseOffering.getValueAt(selectedRow, 0);
            courseSchedule=department.getCalendar().getCourseSchedule(selectedSemester);
            CourseOffer co= courseSchedule.getCourseOfferByNumber(courseNumber);
            co.AssignAsTeacher(fp);
            co.generatSeats(seatNumber);
            co.setLocation(buildingNumber, floorNumber, classroomNumber);
            co.setTimeSchedule(dayOfweek, startTime, endTime);
            
            populateTableCourseOffering(selectedSemester);
            
            fieldCourseName.setEnabled(true);
            fieldCredits.setEnabled(true);
            fieldCourseName.setText("");
            fieldCredits.setText("");
            cmbTeacher.setSelectedIndex(0);
            fieldSeatNumber.setText("");
            fieldBuildingNumber.setText("");
            fieldFloorNumber.setText("");
            fieldClassroomNumber.setText("");
            cmbDate.setSelectedIndex(0);
            spnStartTime.setValue(7);
            spnEndTime.setValue(7);
        }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSearchCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCourseActionPerformed
        // TODO add your handling code here:
        if (cmbSemester.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(this, "Please select a semester first.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
        String selectedSemester= cmbSemester.getSelectedItem().toString();
        
        
        String courseName=fieldSearchCourse.getText();
       if(courseName.isBlank()){
           JOptionPane.showMessageDialog(null, "Please check the input","Warning",JOptionPane.WARNING_MESSAGE);
       return;
       }

        DefaultTableModel model = (DefaultTableModel) tblCourseOffering.getModel();
         model.setRowCount(0);

        CourseSchedule cs = calendar.getCourseSchedule(selectedSemester);
        
        CourseOffer co = cs.getCourseOfferByName(courseName);
        if (co == null) {
             JOptionPane.showMessageDialog(this, "Course not found in this semester.", "Warning", JOptionPane.WARNING_MESSAGE);
              return;
        }
        
                         Object[] row = new Object[7];
                            row[0] =co.getCourseNumber() ;  
                            row[1] =co.getCourseName() ;
                            row[2] = (co.getFacultyassignment() != null &&
                                     co.getFacultyassignment().getFacultyProfile() != null) 
                                      ? co.getFacultyassignment().getFacultyProfile().getFirstName(): "Unassigned";
                            row[3] =co.getCreditHours(); 
                            row[4] =co.getClassroom()!=null?co.getClassroom():"Unassigned";
                            
                            row[5] =co.getSeatlist()!=null?co.getSeatlist().size():"Unassigned";
                            row[6] =co.getTimeSchedule()!=null?co.getTimeSchedule():"Unassigned";

                            model.addRow(row);
        

    }//GEN-LAST:event_btnSearchCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignFaculty;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchCourse;
    private javax.swing.JButton btnSetRelavantInformation;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbDate;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JComboBox<String> cmbTeacher;
    private javax.swing.JTextField fieldBuildingNumber;
    private javax.swing.JTextField fieldClassroomNumber;
    private javax.swing.JTextField fieldCourseName;
    private javax.swing.JTextField fieldCredits;
    private javax.swing.JTextField fieldFloorNumber;
    private javax.swing.JTextField fieldSearchCourse;
    private javax.swing.JTextField fieldSeatNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblBuildingNumber;
    private javax.swing.JLabel lblClassroomNumber;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEndTime;
    private javax.swing.JLabel lblFloorNumber;
    private javax.swing.JLabel lblSearchCourse;
    private javax.swing.JLabel lblSeatNumber;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblStartTime;
    private javax.swing.JLabel lblTeacher;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSpinner spnEndTime;
    private javax.swing.JSpinner spnStartTime;
    private javax.swing.JTable tblCourseOffering;
    // End of variables declaration//GEN-END:variables


    private void populateCmbSemester() {
        Collection<String> semesterNames = calendar.getAllSemesterNames();
        
        cmbSemester.removeAllItems();
        for (String semester : semesterNames) {
        cmbSemester.addItem(semester);
    }
      
    }

    private void populateTableCourseOffering(String semester) {
        DefaultTableModel model = (DefaultTableModel)tblCourseOffering.getModel();
        model.setRowCount(0);
        
        if (semester == null) { 
        return; 
    }
        CourseSchedule cs = calendar.getCourseSchedule(semester);
        
                       for (CourseOffer co : cs.getSchedule()) {  
                        
                         Object[] row = new Object[7];
                            row[0] =co.getCourseNumber() ;  
                            row[1] =co.getCourseName() ;
                            row[2] = (co.getFacultyassignment() != null &&
                                     co.getFacultyassignment().getFacultyProfile() != null) 
                                      ? co.getFacultyassignment().getFacultyProfile().getFirstName(): "Unassigned";
                            row[3] =co.getCreditHours(); 
                            row[4] =co.getClassroom()!=null?co.getClassroom():"Unassigned";
                            
                            row[5] =co.getSeatlist()!=null?co.getSeatlist().size():"Unassigned";
                            row[6] =co.getTimeSchedule()!=null?co.getTimeSchedule():"Unassigned";

                            model.addRow(row);
        }
            
    }

    private void populateCmbTeacher() {
        cmbTeacher.removeAllItems();
        for ( FacultyProfile fp:department.getFacultydirectory().getTeacherlist()) {       
            String teacherName = fp.getFirstName();
            cmbTeacher.addItem(teacherName);
        }
    
    }

    private void populateSpnStartTime() {
        SpinnerNumberModel startTimeModel = new SpinnerNumberModel(7, 0, 23, 1);
        spnStartTime.setModel(startTimeModel);
        JSpinner.NumberEditor startEditor = new JSpinner.NumberEditor(spnStartTime, "0");
        spnStartTime.setEditor(startEditor);
    }

    private void populateSpnEndTime() {
        SpinnerNumberModel endTimeModel = new SpinnerNumberModel(7, 0, 23, 1);
        spnEndTime.setModel(endTimeModel);
        JSpinner.NumberEditor endEditor = new JSpinner.NumberEditor(spnEndTime, "0");
        spnEndTime.setEditor(endEditor);
    }

  /* private void populateTableCourseOfferingBySearchTeacher(String semester) {
        DefaultTableModel model = (DefaultTableModel)tblCourseOffering.getModel();
        model.setRowCount(0);
        String teacherName=fieldSearchTeacher.getText();
        if (semester == null) { 
        return; 
    }
        CourseSchedule cs = calendar.getCourseSchedule(semester);
        
            for (CourseOffer co : cs.getSchedule()) { 
                 boolean isTeacherMatch = false;
            if (co.getFacultyassignment() != null &&
                co.getFacultyassignment().getFacultyProfile() != null) {
            
            FacultyProfile faculty = co.getFacultyassignment().getFacultyProfile();
            String fullName = faculty.getFirstName() + " " + faculty.getLastName();
 
            if (fullName.toLowerCase().contains(teacherName.toLowerCase())) {
                isTeacherMatch = true;
            }
        }
                         if (isTeacherMatch){ 
                         Object[] row = new Object[7];
                            row[0] =co.getCourseNumber() ;  
                            row[1] =co.getCourseName() ;
                            row[2] = (co.getFacultyassignment() != null &&
                                     co.getFacultyassignment().getFacultyProfile() != null) 
                                      ? co.getFacultyassignment().getFacultyProfile().getFirstName()+" "+co.getFacultyassignment().getFacultyProfile().getLastName(): "Unassigned";
                            row[3] =co.getCreditHours(); 
                            row[4] =co.getClassroom()!=null?co.getClassroom():"Unassigned";
                            
                            row[5] =co.getSeatlist()!=null?co.getSeatlist().size():"Unassigned";
                            row[6] =co.getTimeSchedule()!=null?co.getTimeSchedule():"Unassigned";

                            model.addRow(row);
            }
        }    
    }*/
}
